1. Set up the Project
Start by setting up the backend and frontend projects separately.

Step 1.1: Set up the Backend (Node.js + Express + MongoDB)
Create a folder for your project:


npm init -y

Install backend dependencies:- npm install express mongoose dotenv cors

Install TypeScript and types for Node.js:- npm install typescript @types/node @types/express --save-dev

Initialize TypeScript configuration:- npx tsc --init

Create the folder structure for the backend:

mkdir src
cd src
mkdir models controllers config routes

Create an entry file app.ts in the src folder:-

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDB } from './config/db';

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// Connect to DB
connectDB();

// Sample route for testing
app.get('/', (req, res) => {
  res.send('Expense Tracker API');
});

app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


Set up MongoDB connection in config/db.ts:-

import mongoose from 'mongoose';

export const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/expense-tracker', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('Connected to MongoDB');
  } catch (err) {
    console.error('Error connecting to MongoDB:', err);
    process.exit(1);
  }
};


Step 1.2: Create Models and Controllers

Create the Expense model in models/Expense.ts:-

import mongoose from 'mongoose';

const expenseSchema = new mongoose.Schema({
  description: { type: String, required: true },
  amount: { type: Number, required: true },
  date: { type: Date, default: Date.now },
});

const Expense = mongoose.model('Expense', expenseSchema);

export default Expense;


Create the Expense controller in controllers/expenseController.ts:-

import { Request, Response } from 'express';
import Expense from '../models/Expense';

export const getExpenses = async (req: Request, res: Response) => {
  try {
    const expenses = await Expense.find();
    res.json(expenses);
  } catch (err) {
    res.status(500).json({ message: 'Error retrieving expenses' });
  }
};

export const addExpense = async (req: Request, res: Response) => {
  try {
    const { description, amount } = req.body;
    const newExpense = new Expense({ description, amount });
    await newExpense.save();
    res.status(201).json(newExpense);
  } catch (err) {
    res.status(400).json({ message: 'Error adding expense' });
  }
};


Set up routes in routes/expenseRoutes.ts:-

import { Router } from 'express';
import { getExpenses, addExpense } from '../controllers/expenseController';

const router = Router();

router.get('/expenses', getExpenses);
router.post('/expenses', addExpense);

export default router;


Integrate the routes in app.ts:

import expenseRoutes from './routes/expenseRoutes';
app.use('/api', expenseRoutes);


Step 1.3: Run the Server
Compile and run the backend server:

